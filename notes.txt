Main idea of JavaScript
1. Save the data 
2. Generate the HTML
2. Make the HTML interactive

Modules
1. need to add a type module to the script html tag
2. need to write export infront of var/function you want to use in a seperate file
3. need to write import {var} from './filepath/' at the top of the js file to import a module. 

LocalStorage
1. To use local storage use the local storage function like so:
  localStorage.setItem('cart', JSON.stringify(cart));
The item must be a string and the second paramater should be a JSON format of the data. Use JSON.stringify to convert the data into JSON
2. Use local storage when you update some data on the paged 
3. To retrieve local storage you need to parse the local JSON storage like so:
   JSON.parse(localStorage.getItem('cart'));
The name in get item should be the same string name as in setItem. This will parse the string back into a JS data structure/var/object. 

External Library
1. Code that exists outside of the project files. 
2. Create a script tag in the html with a src attirbute.
3. The link in the src attribute should be the link to the external library. 
4. Better way to use an external library is to import the esm version of the library as a module in your js file. (Avoid naming conflicts).
(some librarys may not have an esm version so will need to use the script tag method).

HTML attirbutes
1. If you want to get a property value from a html tag, need to add the data- attriubute and set it ="${variable.property}". 
This is useful when you need to pass a propery value as a pramater in a dom / even listener 

Update the data
Regenerate the HTML
MVC (Model-View-Controller) makes sure the page always matches the data, it is a design pattern 
1. Model = saves and manages the data
2. View = takes the data and displays it on the page
3. Controller = runs some code when we interact with the page (ex: event listeners)

Automated tests
1. Instead of manually checking your code by checking your site, create a test js file where you check if your code passes certain tests. 
